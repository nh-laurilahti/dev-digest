name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '14'

jobs:
  # Lint and type check
  lint-and-typecheck:
    runs-on: ubuntu-latest
    name: Lint & Type Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type checking
        run: npm run typecheck
        
      - name: Check code formatting
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,md}"

  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          API_KEY_SALT: test-api-key-salt-for-ci
          
      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/unit/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: true

  # Integration tests with database
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: digest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: npm run test:setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          
      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          
      - name: Generate Prisma client
        run: npx prisma generate
        
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          JWT_SECRET: test-jwt-secret-for-ci
          API_KEY_SALT: test-api-key-salt-for-ci
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/integration/lcov.info
          flags: integration
          name: integration-tests

  # End-to-end tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: digest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Setup test database
        run: npm run test:setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          
      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          
      - name: Start application server
        run: npm start &
        env:
          NODE_ENV: test
          PORT: 3000
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          JWT_SECRET: test-jwt-secret-for-ci
          API_KEY_SALT: test-api-key-salt-for-ci
          
      - name: Wait for server to be ready
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
          
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          
      - name: Upload E2E test screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: test-results/
          retention-days: 30

  # Performance tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: digest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: npm run test:setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          
      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          JWT_SECRET: test-jwt-secret-for-ci
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  # Security tests
  security-tests:
    runs-on: ubuntu-latest
    name: Security Tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: digest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test database
        run: npm run test:setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          
      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_test
          JWT_SECRET: test-jwt-secret-for-ci
          API_KEY_SALT: test-api-key-salt-for-ci
          
      - name: Run npm audit
        run: npm audit --audit-level moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-results
          path: security-results/
          retention-days: 30

  # Build and deployment preparation
  build-and-package:
    runs-on: ubuntu-latest
    name: Build & Package
    needs: [lint-and-typecheck, unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp -r dist deployment-package/
          cp package*.json deployment-package/
          cp -r prisma deployment-package/
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: deployment-package/
          retention-days: 7

  # Code quality and coverage
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality
    needs: [unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for SonarCloud
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run all tests for coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci
          API_KEY_SALT: test-api-key-salt-for-ci
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: CodeClimate Coverage
        uses: paambaati/codeclimate-action@v5
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: |
            coverage/unit/lcov.info:lcov
            coverage/integration/lcov.info:lcov

  # Dependency check
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Check for outdated dependencies
        run: npm outdated --long || true
        
      - name: Check for security vulnerabilities
        run: npm audit --audit-level moderate
        
      - name: License compliance check
        run: npx license-checker --summary
        
      - name: Check bundle size
        run: |
          npm ci
          npm run build
          npx bundlesize

  # Database migration test
  migration-test:
    runs-on: ubuntu-latest
    name: Database Migration Test
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: digest_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test fresh database setup
        run: |
          npx prisma migrate deploy
          npx prisma generate
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digest_migration_test
          
      - name: Test migration rollback (if supported)
        run: |
          # Add rollback tests if implemented
          echo "Migration rollback tests would go here"

  # Notification of results
  notify-results:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [
      lint-and-typecheck,
      unit-tests,
      integration-tests,
      e2e-tests,
      security-tests,
      build-and-package,
      code-quality
    ]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify Slack on success
        if: needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          message: '✅ All tests passed for commit ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on failure
        if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          message: '❌ Tests failed for commit ${{ github.sha }}. Check GitHub Actions for details.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}