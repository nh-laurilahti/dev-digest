import { vi } from 'vitest';

export interface MockEmailTransporter {
  sendMail: ReturnType<typeof vi.fn>;
  verify: ReturnType<typeof vi.fn>;
}

export const createMockEmailTransporter = (): MockEmailTransporter => {
  return {
    sendMail: vi.fn().mockImplementation(async (mailOptions) => {
      // Simulate successful email sending
      const mockResponse = {
        accepted: [mailOptions.to],
        rejected: [],
        envelopeTime: 100,
        messageTime: 150,
        messageSize: 1024,
        response: '250 2.0.0 OK',
        envelope: {
          from: mailOptions.from,
          to: [mailOptions.to],
        },
        messageId: `<mock-${Date.now()}@test.example>`,
      };

      // Simulate some delay
      await new Promise(resolve => setTimeout(resolve, 50));

      return mockResponse;
    }),
    verify: vi.fn().mockResolvedValue(true),
  };
};

export const mockEmailTemplates = {
  digestEmail: {
    subject: 'Daily Development Digest - {{repositoryName}}',
    html: `
      <h1>Daily Development Digest</h1>
      <h2>{{repositoryName}}</h2>
      <p>Period: {{startDate}} - {{endDate}}</p>
      
      <h3>Summary</h3>
      <p>{{summary}}</p>
      
      <h3>Statistics</h3>
      <ul>
        <li>Total Pull Requests: {{stats.totalPRs}}</li>
        <li>Contributors: {{stats.authors}}</li>
        <li>Lines Changed: {{stats.linesChanged}}</li>
      </ul>
      
      <h3>Pull Requests</h3>
      {{#each pullRequests}}
      <div>
        <h4><a href="{{url}}">#{{number}} - {{title}}</a></h4>
        <p>By {{author}} on {{createdAt}}</p>
        <p>{{body}}</p>
      </div>
      {{/each}}
      
      <p>Generated by Daily Dev Digest</p>
    `,
    text: `
      Daily Development Digest - {{repositoryName}}
      
      Period: {{startDate}} - {{endDate}}
      
      Summary:
      {{summary}}
      
      Statistics:
      - Total Pull Requests: {{stats.totalPRs}}
      - Contributors: {{stats.authors}}
      - Lines Changed: {{stats.linesChanged}}
      
      Pull Requests:
      {{#each pullRequests}}
      #{{number}} - {{title}}
      By {{author}} on {{createdAt}}
      {{url}}
      
      {{/each}}
      
      Generated by Daily Dev Digest
    `,
  },
  welcomeEmail: {
    subject: 'Welcome to Daily Dev Digest',
    html: `
      <h1>Welcome to Daily Dev Digest!</h1>
      <p>Hello {{username}},</p>
      <p>Thank you for signing up for Daily Dev Digest. We're excited to help you stay updated with your repository activities.</p>
      
      <h3>Getting Started</h3>
      <ol>
        <li>Add your repositories to track</li>
        <li>Configure your digest preferences</li>
        <li>Set up notifications (email, Slack, etc.)</li>
      </ol>
      
      <p>If you have any questions, please don't hesitate to reach out to our support team.</p>
      
      <p>Best regards,<br>The Daily Dev Digest Team</p>
    `,
    text: `
      Welcome to Daily Dev Digest!
      
      Hello {{username}},
      
      Thank you for signing up for Daily Dev Digest. We're excited to help you stay updated with your repository activities.
      
      Getting Started:
      1. Add your repositories to track
      2. Configure your digest preferences
      3. Set up notifications (email, Slack, etc.)
      
      If you have any questions, please don't hesitate to reach out to our support team.
      
      Best regards,
      The Daily Dev Digest Team
    `,
  },
  passwordResetEmail: {
    subject: 'Password Reset Request',
    html: `
      <h1>Password Reset Request</h1>
      <p>Hello {{username}},</p>
      <p>We received a request to reset your password. Click the link below to reset your password:</p>
      
      <p><a href="{{resetUrl}}">Reset Password</a></p>
      
      <p>This link will expire in 1 hour. If you didn't request this, please ignore this email.</p>
      
      <p>Best regards,<br>The Daily Dev Digest Team</p>
    `,
    text: `
      Password Reset Request
      
      Hello {{username}},
      
      We received a request to reset your password. Visit the following link to reset your password:
      
      {{resetUrl}}
      
      This link will expire in 1 hour. If you didn't request this, please ignore this email.
      
      Best regards,
      The Daily Dev Digest Team
    `,
  },
};

export const mockEmailService = {
  sendDigestEmail: vi.fn().mockImplementation(async (to, digestData) => {
    const transporter = createMockEmailTransporter();
    return await transporter.sendMail({
      from: 'noreply@dailydevdigest.com',
      to,
      subject: mockEmailTemplates.digestEmail.subject.replace('{{repositoryName}}', digestData.repositoryName),
      html: 'Mock digest email HTML content',
      text: 'Mock digest email text content',
    });
  }),

  sendWelcomeEmail: vi.fn().mockImplementation(async (to, userData) => {
    const transporter = createMockEmailTransporter();
    return await transporter.sendMail({
      from: 'noreply@dailydevdigest.com',
      to,
      subject: mockEmailTemplates.welcomeEmail.subject,
      html: 'Mock welcome email HTML content',
      text: 'Mock welcome email text content',
    });
  }),

  sendPasswordResetEmail: vi.fn().mockImplementation(async (to, resetData) => {
    const transporter = createMockEmailTransporter();
    return await transporter.sendMail({
      from: 'noreply@dailydevdigest.com',
      to,
      subject: mockEmailTemplates.passwordResetEmail.subject,
      html: 'Mock password reset email HTML content',
      text: 'Mock password reset email text content',
    });
  }),

  verifyTransporter: vi.fn().mockResolvedValue(true),
  
  getEmailStats: vi.fn().mockResolvedValue({
    sent: 100,
    delivered: 98,
    bounced: 1,
    complained: 0,
    rejected: 1,
  }),
};

// Email delivery status simulation
export const mockEmailDeliveryStatus = {
  pending: {
    status: 'pending',
    timestamp: new Date(),
  },
  sent: {
    status: 'sent',
    timestamp: new Date(Date.now() + 1000),
    messageId: '<mock-message-id@test.example>',
  },
  delivered: {
    status: 'delivered',
    timestamp: new Date(Date.now() + 5000),
    messageId: '<mock-message-id@test.example>',
  },
  bounced: {
    status: 'bounced',
    timestamp: new Date(Date.now() + 10000),
    messageId: '<mock-message-id@test.example>',
    reason: 'Mailbox does not exist',
  },
  complained: {
    status: 'complained',
    timestamp: new Date(Date.now() + 15000),
    messageId: '<mock-message-id@test.example>',
    reason: 'Spam complaint',
  },
};